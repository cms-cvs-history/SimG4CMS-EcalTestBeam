process PROD  = 
{

    service = MessageLogger
	{
      	untracked vstring destinations = {"cout"}

      	untracked vstring categories = {  
#               "CaloSim",
#				"EcalGeom",
#				"EcalSim",
				"EcalTBInfo",
				"VertexGenerator"}
                untracked vstring debugModules = { "*" }
     	PSet cout = {untracked string threshold = "DEBUG"
				PSet INFO     = { untracked int32 limit = -1 }
				PSet DEBUG    = { untracked int32 limit = 0 }
#				PSet CaloSim  = { untracked int32 limit = 1000000 }
#				PSet EcalGeom = { untracked int32 limit = 1000000 }
#				PSet EcalSim  = { untracked int32 limit = 1000000 }
				PSet EcalTBInfo = { untracked int32 limit = 1000000 }
				PSet VertexGenerator = { untracked int32 limit = 1000000}
                }
   }  	
	   
   # service = Timing {}

   service = RandomNumberGeneratorService
   {
      untracked uint32 sourceSeed = 98765
      PSet moduleSeeds =
      {
         untracked uint32 VtxSmeared = 12345
      }
   }
      
#   block common_beam_direction_parameters = {
#         double MinEta = 0.429841
#         double MaxEta = 0.429841
#         double MinPhi = -0.160386
#         double MaxPhi = -0.160386
#         double BeamMeanX = 0.
#         double BeamMeanY = 0.
#         double BeamPosition = 0.
#  }
   include "SimG4CMS/EcalTestBeam/test/data/crystal500.cff"

   # flat random E-gun
   #
   source = FlatRandomEGunSource
   {
      untracked int32 maxEvents = 2
      PSet PGunParameters =
      {
         # you can request more than 1 particle
         vint32 PartID = {11}
         using common_beam_direction_parameters
#         double MinE   = 119.9
#         double MaxE   = 120.1
         double MinE   = 9.9
         double MaxE   = 10.1
      }
      untracked int32 Verbosity = 0 # set to 1 (or greater)  for printouts
   }

   module VtxSmeared = VertexGenerator 
   {
         string type = "IOMC/EventVertexGenerators/BeamProfileVertexGenerator"
         using common_beam_direction_parameters
         double BeamSigmaX = 0.001
         double BeamSigmaY = 0.001
         bool GaussianProfile = true
   }

   #Geometry
   #   
   include "Geometry/EcalTestBeam/data/cmsEcalIdealTBGeometryXML.cfi"

   es_module = TrackerGeometricDetESModule {}

   # Magnetic Field
   #
   #include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"
   
   # Geant4-based CMS Det.Simulation
   #
   include "SimG4CMS/EcalTestBeam/data/SimG4Object.cfi"

   # Test Beam ECAL specific MC info
   #
   module SimEcalTBG4Object = EcalTBMCInfoProducer {
         untracked string CrystalMapFile = "/home/cossutti/cms/Simulation/CMSSW_0_7_0_pre3/src/Geometry/EcalTestBeam/data/BarrelSM1CrystalCenterElectron120GeV.dat"
         untracked string moduleLabelVtx = 'VtxSmeared' 
         using common_beam_direction_parameters
   }

   module mix = MixingModule {
#         secsource input = PoolRASource  {
#		 untracked vstring fileNames = {'file:simevent.root'}
#         string type = "poisson"
#         double averageNumber = 0
#         int32 minBunch = xxx
#         int32 maxBunch = xxx
#         int32 seed = 1234567
#         }
         int32 bunchspace = 25
   }

   include "Geometry/CaloEventSetup/data/CaloGeometry.cfi"
 
   # use trivial ESProducer for tests
   es_source = EcalTrivialConditionRetriever { }
 
   include "SimCalorimetry/EcalSimProducers/data/ecaldigi_testbeam.cfi"

   # Root/Pool output
   #
   module o1 = PoolOutputModule 
   { 
      untracked string fileName = "ecal_TB_simout.root" 
   }
   
   sequence doSimHits   = { VtxSmeared, SimG4Object }
   sequence doSimTB     = { SimEcalTBG4Object }
   sequence doEcalDigis = { mix, ecaldigi }
   path p1 = { doSimHits, doSimTB, doEcalDigis }
   endpath outpath = { o1 }
   
}		
